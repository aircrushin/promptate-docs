import{_ as s,c as a,o as n,U as p}from"./chunks/framework.isgf4Vyz.js";const v=JSON.parse('{"title":"基本概念","description":"","frontmatter":{},"headers":[],"relativePath":"introduction/basics.md","filePath":"introduction/basics.md"}'),e={name:"introduction/basics.md"},t=p(`<h1 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h1><h2 id="基础提示词" tabindex="-1">基础提示词 <a class="header-anchor" href="#基础提示词" aria-label="Permalink to &quot;基础提示词&quot;">​</a></h2><p>您可以通过简单的提示词（Prompts）获得大量结果，但结果的质量与您提供的信息数量和完善度有关。一个提示词可以包含您传递到模型的_指令_或_问题_等信息，也可以包含其他详细信息，如_上下文_、_输入_或_示例_等。您可以通过这些元素来更好地指导模型，并因此获得更好的结果。</p><p>看下面一个简单的示例：</p><p>提示词：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>the sky is</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>blue</span></span>
<span class="line"><span>The sky is blue on a clear day. On a cloudy day, the sky may be gray or white.</span></span></code></pre></div><p>如以上示例，语言模型能够基于我们给出的上下文内容 \`&quot;The sky is&quot; 完成续写。 而输出的结果可能是出人意料的，或远高于我们的任务要求。</p><p>基于以上示例，如果想要实现更具体的目标，我们还必须提供更多的背景信息或说明信息。</p><p>可以按如下示例试着完善一下：</p><p>提示词：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>完善以下句子:</span></span>
<span class="line"><span>the sky is</span></span></code></pre></div><p>输出结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>so  beautiful today.</span></span></code></pre></div><p>本例中，我们告知模型去完善句子，因此输出的结果和我们最初的输入是完全符合的。 <strong>提示工程</strong> （Prompt Engineering）就是探讨如何设计出最佳提示词，用于指导语言模型帮助我们高效完成某项任务。</p><p>以上示例基本说明了现阶段的大语言模型能够发挥的功能作用。它们可以用于执行各种高级任务，如文本概括、数学推理、代码生成等。</p><h2 id="提示词格式" tabindex="-1">提示词格式 <a class="header-anchor" href="#提示词格式" aria-label="Permalink to &quot;提示词格式&quot;">​</a></h2><p>前文中我们还是采取的比较简单的提示词。 标准提示词应该遵循以下格式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;问题&gt;?</span></span></code></pre></div><p>或</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;指令&gt;</span></span></code></pre></div><p>这种可以被格式化为标准的问答格式，如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Q: &lt;问题&gt;?</span></span>
<span class="line"><span>A:</span></span></code></pre></div><p>以上的提示方式，也被称为_零样本提示（zero-shot prompting）_，即用户不提供任务结果相关的示范，直接提示语言模型给出任务相关的回答。某些大型语言模式有能力实现零样本提示，但这也取决于任务的复杂度和已有的知识范围。</p><p>基于以上标准范式，目前业界普遍使用的还是更高效的_小样本提示（Few-shot Prompting）_范式，即用户提供少量的提示范例，如任务说明等。小样本提示一般遵循以下格式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&lt;问题&gt;?</span></span>
<span class="line"><span>&lt;答案&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;问题&gt;?</span></span>
<span class="line"><span>&lt;答案&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;问题&gt;?</span></span>
<span class="line"><span>&lt;答案&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&lt;问题&gt;?</span></span></code></pre></div><p>而问答模式即如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Q: &lt;问题&gt;?</span></span>
<span class="line"><span>A: &lt;答案&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Q: &lt;问题&gt;?</span></span>
<span class="line"><span>A: &lt;答案&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Q: &lt;问题&gt;?</span></span>
<span class="line"><span>A: &lt;答案&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Q: &lt;问题&gt;?</span></span>
<span class="line"><span>A:</span></span></code></pre></div><p>注意，使用问答模式并不是必须的。你可以根据任务需求调整提示范式。比如，您可以按以下示例执行一个简单的分类任务，并对任务做简单说明：</p><p>提示词</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>This is awesome! // Positive</span></span>
<span class="line"><span>This is bad! // Negative</span></span>
<span class="line"><span>Wow that movie was rad! // Positive</span></span>
<span class="line"><span>What a horrible show! //</span></span></code></pre></div><p>输出结果</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Negative</span></span></code></pre></div><p>语言模型可以基于一些说明了解和学习某些任务，而小样本提示正好可以赋能上下文学习能力。</p>`,35),i=[t];function l(c,o,d,h,g,r){return n(),a("div",null,i)}const b=s(e,[["render",l]]);export{v as __pageData,b as default};
